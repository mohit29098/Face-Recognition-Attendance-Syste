import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import cv2
import face_recognition
import numpy as np
import sqlite3
import os
from datetime import datetime
from PIL import Image, ImageTk

# ========== DATABASE SETUP ==========
conn = sqlite3.connect("attendance.db")
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS employees (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    face_encoding BLOB NOT NULL
                )''')

cursor.execute('''CREATE TABLE IF NOT EXISTS attendance (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    emp_id INTEGER,
                    name TEXT,
                    date TEXT,
                    time TEXT,
                    status TEXT,
                    FOREIGN KEY(emp_id) REFERENCES employees(id)
                )''')

conn.commit()

# ========== FUNCTIONS ==========

def register_employee():
    """Register a new employee with face encoding."""
    name = name_entry.get()
    if not name:
        messagebox.showerror("Error", "Enter employee name!")
        return

    file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.jpg *.png")])
    if not file_path:
        return

    img = face_recognition.load_image_file(file_path)
    encodings = face_recognition.face_encodings(img)
    if len(encodings) == 0:
        messagebox.showerror("Error", "No face detected in the image!")
        return

    encoding = encodings[0].tobytes()

    cursor.execute("INSERT INTO employees (name, face_encoding) VALUES (?, ?)", (name, encoding))
    conn.commit()
    messagebox.showinfo("Success", f"Employee {name} registered successfully!")

def mark_attendance():
    """Start webcam and recognize faces to mark attendance."""
    cap = cv2.VideoCapture(0)

    known_encodings = []
    known_names = []

    cursor.execute("SELECT id, name, face_encoding FROM employees")
    for row in cursor.fetchall():
        emp_id, emp_name, enc = row
        known_encodings.append(np.frombuffer(enc, dtype=np.float64))
        known_names.append((emp_id, emp_name))

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        face_locations = face_recognition.face_locations(rgb_frame)
        face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

        for face_encoding, face_location in zip(face_encodings, face_locations):
            matches = face_recognition.compare_faces(known_encodings, face_encoding)
            face_distances = face_recognition.face_distance(known_encodings, face_encoding)
            best_match_index = np.argmin(face_distances)

            if matches[best_match_index]:
                emp_id, emp_name = known_names[best_match_index]
                now = datetime.now()
                date = now.strftime("%Y-%m-%d")
                time = now.strftime("%H:%M:%S")

                cursor.execute("SELECT * FROM attendance WHERE emp_id=? AND date=?", (emp_id, date))
                if not cursor.fetchone():
                    cursor.execute("INSERT INTO attendance (emp_id, name, date, time, status) VALUES (?, ?, ?, ?, ?)",
                                   (emp_id, emp_name, date, time, "Present"))
                    conn.commit()

                top, right, bottom, left = face_location
                cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
                cv2.putText(frame, emp_name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

        cv2.imshow("Face Recognition Attendance", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

def show_attendance():
    """Display today's attendance in GUI table."""
    for row in attendance_tree.get_children():
        attendance_tree.delete(row)

    today = datetime.now().strftime("%Y-%m-%d")
    cursor.execute("SELECT name, time, status FROM attendance WHERE date=?", (today,))
    for row in cursor.fetchall():
        attendance_tree.insert("", tk.END, values=row)

# ========== GUI ==========
root = tk.Tk()
root.title("Face Recognition Attendance System")
root.geometry("800x600")

# Tabs
tabControl = ttk.Notebook(root)

tab1 = ttk.Frame(tabControl)
tab2 = ttk.Frame(tabControl)
tabControl.add(tab1, text="Register Employee")
tabControl.add(tab2, text="Mark Attendance / Reports")
tabControl.pack(expand=1, fill="both")

# Register Tab
tk.Label(tab1, text="Enter Employee Name:").pack(pady=10)
name_entry = tk.Entry(tab1, width=30)
name_entry.pack(pady=5)

tk.Button(tab1, text="Register Employee", command=register_employee).pack(pady=10)

# Attendance Tab
tk.Button(tab2, text="Start Attendance (Camera)", command=mark_attendance).pack(pady=10)
tk.Button(tab2, text="Show Today's Attendance", command=show_attendance).pack(pady=10)

attendance_tree = ttk.Treeview(tab2, columns=("Name", "Time", "Status"), show="headings", height=10)
attendance_tree.heading("Name", text="Employee Name")
attendance_tree.heading("Time", text="Time In")
attendance_tree.heading("Status", text="Status")
attendance_tree.pack(pady=20)

root.mainloop()